class screen_entity ui
{
//pointer to event which "tick" this object
protected staticeventhandler global_ticker;

protected screen_entity spawn_entity(name type, int layer, name vis_state, name log_state, vector2 pos, vector2 vel = (0, 0), vector2 scale = (1, 1), double alpha = 1)
{
    if(global_ticker)
        return screen_animator(global_ticker).create_new_enity(type, layer, vis_state, log_state, pos, vel, scale, alpha);

    else return null;
}

//default init function
virtual screen_entity init(staticeventhandler owner, int spawn_layer = 0, name vis_st = "", name log_st = "", vector2 pos = (-1, -1), vector2 vel = (0, 0), vector2 sc = (1, 1), double alph = 1)
{
    global_ticker = owner;
    layer_number = spawn_layer;
    init_visual_state(vis_st);
    init_logic_state(log_st);
    screen_pos = pos;
    velocity = vel;
    scale = sc;
    alpha = alph;
    return self;
}

protected void init_logic_state(name n)
{
    if(n)
    {
        state_l = logic_state(new(n));
        if(state_l)
            logic_state(state_l).init();
        else
            console.printf("cant find %s logic state", n);
    }

    else if(state_l)
        state_l.destroy();
}
protected void init_visual_state(name n)
{
    if(n)
    {
        state_v = visual_state(new(n));
        if(state_v)
            visual_state(state_v).init();
        else
            console.printf("cant find %s visual state", n);
    }

    else if (state_v)
        state_v.destroy();
}



//bitfield, store states (condition) of a entity 
protected uint entity_flag;
uint get_flag() const
{
    return entity_flag;
}





//position on the screen (of the left upper corner)
protected vector2 screen_pos;
vector2 get_pos() const
{
    return screen_pos;
}

//entity velocity on screen
protected vector2 velocity;
vector2 get_velocity() const
{
    return velocity;
}

//scale of a picture
protected vector2 scale;
vector2 get_scale() const
{
    return scale;
}

//time (1/35 seconds) from last state changing
protected double entity_tics;
uint get_tics() const
{
    return entity_tics;
}

//store layer of entity
protected int layer_number;
int get_layer() const
{
    return layer_number;
}
void change_layer(int l)
{
    layer_number = l;
}

//default alpha meaning
protected double alpha;
double get_alpha() const
{
    return alpha;
}

//angle of a picture
protected double angle;
double get_angle() const
{
    return angle;
}



protected logic_state state_l;
//tick entity virtual
//called from screen_ticker event uitick function
//responsible for calling actions (spawning of aditional entities, movinig, etc)
virtual void entity_logic_tick()
{
    screen_pos += velocity;

    if(!state_l)
    {
        destroy();
        return;
    }

    let actions = logic_state(state_l);
    //if still have time to tick
	if(actions.tics != -1)
	{
		if (--actions.tics <= 0)
		{
			if (!actions.next_logic_state)
                self.destroy();
            else
                init_logic_state(actions.next_logic_state);
		}
	}
    //else, check visual states. if it absent, self destroys
    else
    {
        if(!state_v)
            self.destroy();
    }
}


//store actors visual apeearance here
protected visual_state state_v;
//get entity texture
textureid get_texture() const
{
    if(state_v)
        return visual_state(state_v).picture;

    else return texman.CheckForTexture("", TexMan.TYPE_ANY);
}

//get entity string
string get_string() const
{
    if(state_v)
        return visual_state(state_v).text;

    else return "";
}

protected double visual_tics;
//tick entity virtual
//called from screen_ticker event renderoverlay function
//responsible for entity appearance (text or texture, alpha, scale, etc.)
virtual void entity_visual_tick(double tick_fraction)
{
    if(!state_v) return;//invisible entity, probably exist for some action(s)
    if(tick_fraction >= 1) return;//something goes very wrong

    let appearance = visual_state(state_v);

	if (appearance.tics > 0)
	{
        if(visual_tics > tick_fraction)
            visual_tics = tick_fraction;

        //console.printf("tick fraction is %f, visual_tics %f", tick_fraction, visual_tics);
        //since each frame rendering happens between logic (uniform aka EXACT 1/35 seconds) tics
        //we need to store previous tick fraction duration
        //and only the subtract it difference from visual state tick duration
        double tick_diff = tick_fraction - visual_tics;
        appearance.tics -= abs(tick_diff);
        //console.printf("tick difference %f", tick_diff);
		if (appearance.tics <= 0)
		{
            visual_tics = 0;
			if (!appearance.next_visual_state)
            {
                appearance.destroy();
                return;//"garbage collection" happens in logic state tick
            }
            else
            {
                alpha -= 0.1;
                scale *= 1.05;
                visual_tics = 0;
                init_visual_state(appearance.next_visual_state);
                return;
            }
        }
        visual_tics = tick_fraction;
	}
    
}

}

//logical state base
class logic_state
{
    virtual void init()
    {}

    int tics;
    name next_logic_state;
    name logic_state_name;
}

//technical state, mean "do nothing"
//for entity this mean "exist as long as it have some visual state"
class no_logic : logic_state
{
    override void init()
    {
        tics = -1;
        next_logic_state = "no_logic";
    }
}



//visual state base
class visual_state
{
    virtual void init()
    {}

    textureid picture;
    string text;
    double tics;
    name next_visual_state;
    name visual_state_name;
}

//technical state, mean "show nothing"
class no_visual : visual_state
{
    override void init()
    {
        picture = texman.CheckForTexture("", TexMan.TYPE_ANY);
        text = "";
        tics = -1;
        next_visual_state = "no_visual";
    }
}
