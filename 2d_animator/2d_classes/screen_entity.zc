class screen_entity ui
{
//pointer to event which "tick" this object
protected staticeventhandler ticker;

//set default values for entity to "im in the middle of the screen"
//so it defenitelly can be seen, in case of "why nothing whos up?"
protected void init_defaults(vector2 pos = (-1, -1))
{
    scale = (1, 1);
    if(pos == (-1, -1) )
        screen_pos = pos;
    else
        screen_pos = (screen.GetWidth() / 2, screen.Getheight() / 2);
    
    velocity = (0, 0);
    alpha = 1;
}

virtual screen_entity init(staticeventhandler owner, vector2 pos = (-1, -1), int spawn_layer = 0)
{
    ticker = owner;
    layer_number = spawn_layer;
    init_defaults(pos);
    return self;
}

//bitfield, store states (condition) of a entity 
private uint flags;






//position on the screen (of the left upper corner)
protected vector2 screen_pos;
vector2 get_pos() const
{
    return screen_pos;
}

//entity velocity on screen
protected vector2 velocity;
vector2 get_velocity() const
{
    return velocity;
}

//texture of an entity
protected textureid pic;
textureid get_texture() const
{
    return pic;
}

//scale of a picture
protected vector2 scale;
vector2 get_scale() const
{
    return scale;
}

//time (1/35 seconds) from last state changing
protected uint time;
uint get_tics() const
{
    return time;
}

//store layer of entity
protected int layer_number;
int get_layer() const
{
    return layer_number;
}
void change_layer(int l)
{
    layer_number = l;
}

//store names of the previous, current and next state
protected entity_state prev_state, cur_state, next_state;

entity_state entity_find_state(name state_name)
{
    return null;
}

//tick entity virtual
//called from screen_ticker event uitick function
virtual void screen_entity_tick()
{}

protected double alpha;
double get_alpha() const
{
    return alpha;
}

}